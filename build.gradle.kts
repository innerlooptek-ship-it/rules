/*
 * This file was generated by the Gradle 'init' task.
 */
import org.gradle.kotlin.dsl.jacoco
plugins {
    java
    `java-library`
    `maven-publish`
    id("org.springframework.boot") version "3.4.7"
    id("io.spring.dependency-management") version "1.1.7"
    id("jacoco")
    id("org.sonarqube") version "6.1.0.5360"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
    runtimeClasspath {
        exclude(group = "org.jacoco", module = "org.jacoco.agent")
        exclude(group = "org.aspectj", module = "aspectjweaver")
        exclude(group = "junit", module = "junit")
        exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
    }
}

repositories {
    mavenCentral()
    maven { url = uri("https://releases.jfrog.io/artifactory/jfrog-repo") }
}

dependencies {
    constraints {
        implementation("net.minidev:json-smart:2.5.2")
        testImplementation("net.minidev:json-smart:2.5.2")
    }

    implementation( "org.json:json:20231013")
    implementation("org.postgresql:postgresql:42.7.2")
    implementation("org.springframework.boot:spring-boot-starter-webflux:3.4.7"){
        exclude(group = "ch.qos.logback", module = "logback-classic")
        exclude(group = "ch.qos.logback", module = "logback-core")
    }
    implementation("com.google.guava:guava:32.0.0-android")
    implementation("org.springframework.boot:spring-boot-starter-web:3.4.7") {
        exclude(group = "ch.qos.logback", module = "logback-classic")
        exclude(group = "ch.qos.logback", module = "logback-core")
    }
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("io.micrometer:micrometer-registry-prometheus:1.12.0")
    implementation("com.typesafe:config:1.4.3")
    implementation("org.mvel:mvel2:2.5.2.Final")
    implementation("org.drools:drools-core:10.0.0")
    implementation("org.drools:drools-compiler:10.0.0") {
        exclude(group = "org.eclipse.jdt", module = "ecj")
    }
    implementation("org.drools:drools-io:10.0.0")
    implementation("org.drools:drools-decisiontables:10.0.0")
    implementation("org.drools:drools-mvel:10.0.0")
    implementation("org.projectlombok:lombok:1.18.28")
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    implementation("org.apache.commons:commons-lang3:3.14.0")
    implementation("org.apache.commons:commons-compress:1.26.0")
//    implementation("com.cvshealth.digital.framework:digital-spring-boot-starter-web:2.0.8")

    implementation(platform("org.springframework.boot:spring-boot-dependencies:3.4.7"))

// Swagger UI Dependencies
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
    implementation("org.webjars:swagger-ui:5.2.0")
    implementation("jakarta.validation:jakarta.validation-api:3.0.2")
    implementation("org.hibernate.validator:hibernate-validator:8.0.1.Final")
// Jasypt Dependencies
    implementation("org.jasypt:jasypt:1.9.3")
    implementation("net.minidev:json-smart:2.5.2")
    implementation("org.apache.poi:poi-ooxml:5.4.0")
    implementation("org.apache.tomcat.embed:tomcat-embed-core:10.1.43")

    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    testImplementation("io.rest-assured:rest-assured:5.4.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test:3.4.7") {
        exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
        exclude(group = "junit", module = "junit")
    }
    testImplementation("io.projectreactor:reactor-test:3.6.4")
    testImplementation("org.springframework.graphql:spring-graphql-test:1.4.0")
    compileOnly("org.projectlombok:lombok:1.18.32")
    annotationProcessor("org.projectlombok:lombok:1.18.32")
    testImplementation("org.jbehave:jbehave-core:5.2.0") {
        exclude(group = "junit", module = "junit")
        exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
    }
    testImplementation("org.jbehave:jbehave-spring:5.2.0")
    testImplementation("org.jbehave:jbehave-gherkin:5.2.0")
    testImplementation("org.projectlombok:lombok:1.18.28")

    implementation ("org.springframework.kafka:spring-kafka:3.2.9")
    implementation ("org.apache.kafka:kafka-clients:3.9.1")
    implementation("io.netty:netty-handler:4.1.118.Final")
    implementation("org.eclipse.jdt:ecj:3.33.0")
    implementation("org.apache.commons:commons-lang3:3.18.0")


    api("org.springframework.boot:spring-boot-starter-data-cassandra-reactive:3.3.7"){
        exclude("com.fasterxml.jackson.core", "jackson-core")
    }
    implementation("com.fasterxml.jackson.core:jackson-core:2.19.1")
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.16.1")
    implementation("commons-codec:commons-codec:1.16.1")
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:3.0.1")
    implementation("org.apache.commons:commons-lang3:3.18.0")
    implementation("org.modelmapper:modelmapper:2.4.2")
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("io.netty:netty-handler:4.1.118.Final")
    implementation("ch.qos.logback:logback-core:1.3.15")
    implementation("ch.qos.logback:logback-classic:1.3.15")
    implementation("commons-io:commons-io:2.14.0")
    compileOnly("org.projectlombok:lombok:1.18.32")
    annotationProcessor("org.projectlombok:lombok:1.18.32")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.jbehave:jbehave-core:5.2.0")
    testImplementation("org.jbehave:jbehave-spring:5.2.0")
    testImplementation("org.jbehave:jbehave-gherkin:5.2.0")
    testImplementation("org.projectlombok:lombok:1.18.28")
    testImplementation("io.projectreactor:reactor-test:3.6.4")
}

group = "com.cvshealth.digital.microservice.iqe"
description = "dhs-scheduling-iqe-app"


publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.withType<Test> {
    // REQUIRED: Tell Gradle to use the JUnit 5 platform to execute tests
    // see https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
    finalizedBy(tasks.jacocoTestCoverageVerification) // check that code coverage was met

}

tasks.jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/test/htmlReport"))
    }
    dependsOn(tasks.test) // tests are required to run before generating the report
    classDirectories.setFrom(classDirectories.files.map {
        fileTree(it).matching {
            exclude("com/cvshealth/digital/microservice/iqe/config/**",
                "com/cvshealth/digital/microservice/iqe/constants/**",
                "com/cvshealth/digital/microservice/iqe/model/**",
                "com/cvshealth/digital/microservice/iqe/dto/**"
            )
        }
    })


}

tasks.jacocoTestCoverageVerification {

    classDirectories.setFrom(classDirectories.files.map {
        fileTree(it).matching {
            exclude("com/cvshealth/digital/microservice/iqe/config/**",
                "com/cvshealth/digital/microservice/iqe/constants/**",
                "com/cvshealth/digital/microservice/iqe/model/**",
                "com/cvshealth/digital/microservice/iqe/dto/**"
            )
        }
    })

    violationRules {
        rule {
            limit {
                minimum = "0.01".toBigDecimal()
            }
        }
    }
    dependsOn(tasks.test) // tests are required to run before verification
}